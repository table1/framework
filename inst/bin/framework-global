#!/usr/bin/env bash
# Framework CLI - Global Implementation
#
# This is the actual CLI implementation that handles all commands.
# Called by the framework shim when no project-local bin/framework exists.
#
# Provides commands:
#   new         - Create new Framework project
#   version     - Show Framework package version
#   update      - Update Framework from GitHub (alias: self-update)
#   help        - Show help information

set -e

# URL to the canonical new-project.sh script
# Add package version to URL to bypass GitHub CDN cache when package updates
PACKAGE_VERSION=$(Rscript --quiet --no-save -e "cat(as.character(packageVersion('framework')))" 2>/dev/null || echo "dev")
SCRIPT_URL="https://raw.githubusercontent.com/table1/framework-project/main/new-project.sh?v=${PACKAGE_VERSION}"

# Detect color support
if [ -t 1 ] && command -v tput >/dev/null 2>&1 && [ "$(tput colors 2>/dev/null || echo 0)" -ge 8 ]; then
  BLUE='\033[1;34m'    # Bright blue - readable on both dark and light backgrounds
  YELLOW='\033[1;33m'  # Bright yellow - readable on both dark and light backgrounds
  GREEN='\033[1;32m'   # Bright green - readable on both dark and light backgrounds
  RED='\033[1;31m'     # Bright red - readable on both dark and light backgrounds
  NC='\033[0m'
else
  BLUE=''
  YELLOW=''
  GREEN=''
  RED=''
  NC=''
fi

COMMAND="${1:-help}"

# Function to check if settings are configured
check_settings_configured() {
  frameworkrc="$HOME/.frameworkrc"

  # If frameworkrc doesn't exist, settings not configured
  if [ ! -f "$frameworkrc" ]; then
    return 1
  fi

  # Check for required settings
  fw_ides=$(grep "^FW_IDES=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
  fw_ai=$(grep "^FW_AI_SUPPORT=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')

  # If any required setting is missing, not configured
  if [ -z "$fw_ides" ] || [ -z "$fw_ai" ]; then
    return 1
  fi

  return 0
}

# Function to run settings check-in
run_settings_checkin() {
  printf "\n${BLUE}═══════════════════════════════════════════════${NC}\n"
  printf "${BLUE}Framework Global Settings Check-in${NC}\n"
  printf "${BLUE}═══════════════════════════════════════════════${NC}\n\n"
  printf "We've improved Framework's functionality!\n"
  printf "Let's configure your preferences so future projects are set up just right.\n\n"

  frameworkrc="$HOME/.frameworkrc"

  # Create frameworkrc if it doesn't exist
  if [ ! -f "$frameworkrc" ]; then
    touch "$frameworkrc"
  fi

  # Ask about IDE preferences
  printf "${YELLOW}IDE Preferences${NC}\n"
  printf "Which IDE/editor do you primarily use?\n"
  printf "  1. Positron / VS Code\n"
  printf "  2. RStudio\n"
  printf "  3. Both\n"
  printf "  4. Neither (other editor)\n"
  printf "Choice (1-4): "
  read -r ide_choice

  case "$ide_choice" in
    1) ides="vscode" ;;
    2) ides="rstudio" ;;
    3) ides="rstudio,vscode" ;;
    4) ides="none" ;;
    *) ides="rstudio,vscode" ;;  # Default to both
  esac

  # Update frameworkrc
  grep -v "^FW_IDES=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
  echo "FW_IDES=\"$ides\"" >> "$frameworkrc.tmp"
  mv "$frameworkrc.tmp" "$frameworkrc"

  printf "\n${YELLOW}AI Assistant Support${NC}\n"
  printf "Do you want Framework to create instruction files for AI coding assistants?\n"
  printf "These files help assistants understand Framework conventions.\n"
  printf "Enable AI assistant support? (y/n) [y]: "
  read -r ai_response

  if [ "$ai_response" = "n" ] || [ "$ai_response" = "N" ]; then
    # User doesn't want AI support
    grep -v "^FW_AI_SUPPORT=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
    grep -v "^FW_AI_ASSISTANTS=" "$frameworkrc.tmp" > "$frameworkrc.tmp2" 2>/dev/null || touch "$frameworkrc.tmp2"
    echo "FW_AI_SUPPORT=\"never\"" >> "$frameworkrc.tmp2"
    mv "$frameworkrc.tmp2" "$frameworkrc"
    rm -f "$frameworkrc.tmp"
  else
    # Ask which assistants
    printf "\nWhich AI assistants do you use?\n"
    printf "  1. Claude Code\n"
    printf "  2. GitHub Copilot\n"
    printf "  3. AGENTS.md (cross-platform)\n"
    printf "  4. All of the above\n"
    printf "Enter numbers (e.g., 1,3 or 4 for all): "
    read -r selection

    # Parse selection
    assistants=""
    if [ "$selection" = "4" ]; then
      assistants="claude,copilot,agents"
    else
      if echo "$selection" | grep -q "1"; then assistants="claude"; fi
      if echo "$selection" | grep -q "2"; then
        if [ -n "$assistants" ]; then assistants="$assistants,copilot"; else assistants="copilot"; fi
      fi
      if echo "$selection" | grep -q "3"; then
        if [ -n "$assistants" ]; then assistants="$assistants,agents"; else assistants="agents"; fi
      fi
    fi

    if [ -z "$assistants" ]; then
      assistants="claude"  # Default to Claude if nothing selected
    fi

    # Update frameworkrc
    grep -v "^FW_AI_SUPPORT=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
    grep -v "^FW_AI_ASSISTANTS=" "$frameworkrc.tmp" > "$frameworkrc.tmp2" 2>/dev/null || touch "$frameworkrc.tmp2"
    echo "FW_AI_SUPPORT=\"yes\"" >> "$frameworkrc.tmp2"
    echo "FW_AI_ASSISTANTS=\"$assistants\"" >> "$frameworkrc.tmp2"
    mv "$frameworkrc.tmp2" "$frameworkrc"
    rm -f "$frameworkrc.tmp"
  fi

  printf "\n${GREEN}✓ Preferences saved!${NC}\n"
  printf "Your settings will be used as defaults for new projects.\n\n"
}

case "$COMMAND" in
  new)
    # Check if settings are configured
    if ! check_settings_configured; then
      printf "\n${YELLOW}Before we get started...${NC}\n\n"
      run_settings_checkin
    fi

    # Export settings so R can see them
    frameworkrc="$HOME/.frameworkrc"
    if [ -f "$frameworkrc" ]; then
      export FW_IDES=$(grep "^FW_IDES=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
      export FW_AI_SUPPORT=$(grep "^FW_AI_SUPPORT=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
      export FW_AI_ASSISTANTS=$(grep "^FW_AI_ASSISTANTS=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
    fi

    # Remove 'new' from arguments and check for --dev-mode
    shift

    # Check if --dev-mode flag is present
    DEV_MODE=false
    for arg in "$@"; do
      if [ "$arg" = "--dev-mode" ]; then
        DEV_MODE=true
        break
      fi
    done

    if [ "$DEV_MODE" = true ]; then
      # Dev mode: use local new-project.sh and set environment variable
      LOCAL_SCRIPT="$HOME/code/framework-project/new-project.sh"
      if [ ! -f "$LOCAL_SCRIPT" ]; then
        printf "${RED}Error: Dev mode requires framework-project at $HOME/code/framework-project${NC}\n"
        exit 1
      fi
      export FW_DEV_MODE=true
      export FW_DEV_PATH="$HOME/code/framework"
      bash "$LOCAL_SCRIPT" "$@"
    else
      # Normal mode: fetch from GitHub
      curl -fsSL "$SCRIPT_URL" | bash -s "$@"
    fi
    ;;

  version)
    # Show Framework package version
    Rscript --quiet --no-save --slave -e "cat('Framework version', as.character(packageVersion('framework')), '\n')"
    ;;

  update|self-update)
    # Update Framework package and CLI from GitHub first
    printf "${BLUE}Updating Framework and CLI from GitHub...${NC}\n\n"
    printf "Update dependencies to latest versions? [Y/n]: "
    read -r response

    case "$response" in
      [nN]|[nN][oO])
        R --quiet --no-save -e "framework::cli_update(upgrade_deps = FALSE)"
        ;;
      *)
        R --quiet --no-save -e "framework::cli_update(upgrade_deps = TRUE)"
        ;;
    esac

    # Check if settings are configured (after update)
    if ! check_settings_configured; then
      run_settings_checkin
    fi
    ;;

  configure:ides)
    # Configure IDE preferences
        frameworkrc="$HOME/.frameworkrc"

        # Read current settings
        fw_ides=$(grep "^FW_IDES=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')

        # Show status
        printf "\n${BLUE}Framework IDE Configuration${NC}\n"
        printf "═══════════════════════════════════════════════\n\n"
        if [ -n "$fw_ides" ]; then
          printf "Current IDEs: $fw_ides\n\n"
        else
          printf "Current IDEs: not configured (defaults to both)\n\n"
        fi

        # Ask which IDEs
        printf "Which IDEs/editors do you use?\n"
        printf "  1. Positron / VS Code\n"
        printf "  2. RStudio\n"
        printf "  3. Both\n"
        printf "  4. Neither (other editor)\n\n"
        printf "Enter choice (1-4): "
        read -r choice

        case "$choice" in
          1)
            ides="vscode"
            ;;
          2)
            ides="rstudio"
            ;;
          3)
            ides="rstudio,vscode"
            ;;
          4)
            ides="none"
            ;;
          *)
            printf "\n${RED}Invalid choice. Configuration unchanged.${NC}\n"
            exit 1
            ;;
        esac

        # Update frameworkrc
        if [ -f "$frameworkrc" ]; then
          # Remove existing line
          grep -v "^FW_IDES=" "$frameworkrc" > "$frameworkrc.tmp"
          mv "$frameworkrc.tmp" "$frameworkrc"
        fi

        # Add new line
        echo "FW_IDES=\"$ides\"" >> "$frameworkrc"

        printf "\n${GREEN}✓ IDE preferences saved${NC}\n"
        printf "  IDEs: $ides\n"
        ;;

  configure:ai-agents)
    # Configure AI assistant support (bash prompting, no R readline)
        frameworkrc="$HOME/.frameworkrc"

        # Read current settings
        fw_support=$(grep "^FW_AI_SUPPORT=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
        fw_assistants=$(grep "^FW_AI_ASSISTANTS=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')

        # Show status
        printf "\n${BLUE}Framework AI Assistant Support Configuration${NC}\n"
        printf "═══════════════════════════════════════════════\n\n"
        if [ "$fw_support" = "never" ]; then
          printf "Current status: disabled\n\n"
        elif [ "$fw_support" = "yes" ]; then
          printf "Current status: enabled (assistants: $fw_assistants)\n\n"
        else
          printf "Current status: not configured\n\n"
        fi

        # Ask what to do
        printf "What would you like to do?\n"
        printf "  1. Enable/change AI assistant support\n"
        printf "  2. Disable AI assistant support\n"
        printf "  3. Cancel\n\n"
        printf "Enter choice (1-3): "
        read -r choice

        case "$choice" in
          1)
            # Enable/change
            printf "\nWhich AI assistants do you use? (Select all that apply)\n"
            printf "  1. Claude Code (CLAUDE.md)\n"
            printf "  2. GitHub Copilot (.github/copilot-instructions.md)\n"
            printf "  3. AGENTS.md (cross-platform, industry standard)\n"
            printf "  4. All of the above\n\n"
            printf "Enter numbers (e.g., 1,3 or 4 for all): "
            read -r selection

            # Parse selection and convert to comma-separated list
            assistants=""
            if [ "$selection" = "4" ]; then
              assistants="claude,copilot,agents"
            else
              # Parse comma-separated numbers
              if echo "$selection" | grep -q "1"; then assistants="claude"; fi
              if echo "$selection" | grep -q "2"; then
                if [ -n "$assistants" ]; then assistants="$assistants,copilot"; else assistants="copilot"; fi
              fi
              if echo "$selection" | grep -q "3"; then
                if [ -n "$assistants" ]; then assistants="$assistants,agents"; else assistants="agents"; fi
              fi
            fi

            if [ -z "$assistants" ]; then
              printf "\n${RED}No assistants selected. Configuration unchanged.${NC}\n"
              exit 1
            fi

            # Call R to update frameworkrc
            R --quiet --no-save -e "framework::configure_ai_agents(support='yes', assistants=c($(echo $assistants | sed 's/,/\",\"/g' | sed 's/^/\"/' | sed 's/$/\"/'  )))"
            ;;
          2)
            # Disable
            R --quiet --no-save -e "framework::configure_ai_agents(support='never')"
            ;;
          *)
            printf "\n${YELLOW}Cancelled. No changes made.${NC}\n"
            exit 0
            ;;
        esac
        ;;

  help|--help|-h)
    printf "${BLUE}Framework CLI - R Data Analysis Project Scaffolding${NC}\n\n"

    printf "${YELLOW}Create:${NC}\n"
    printf "  framework new [name] [type]             Create new project\n\n"

    printf "${YELLOW}Make:${NC}\n"
    printf "  framework make:notebook [name]          Create notebook (Quarto/RMarkdown)\n"
    printf "  framework make:quarto [name]            Create Quarto notebook (.qmd)\n"
    printf "  framework make:rmd [name]               Create RMarkdown notebook (.Rmd)\n"
    printf "  framework make:script [name]            Create R script (.R)\n"
    printf "  framework make:presentation [name]      Create reveal.js presentation\n\n"

    printf "${YELLOW}Configure:${NC}\n"
    printf "  framework configure:author              Set author information\n"
    printf "  framework configure:data                Add data source to config\n"
    printf "  framework configure:connection          Add database connection\n"
    printf "  framework configure:packages            Add package dependency\n"
    printf "  framework configure:directories         Configure project directories\n\n"

    printf "${YELLOW}Configuration:${NC}\n"
    printf "  framework configure:ides                Configure IDE preferences\n"
    printf "  framework configure:ai-agents           Configure AI assistant support\n\n"

    printf "${YELLOW}Maintenance:${NC}\n"
    printf "  framework version                       Show Framework package version\n"
    printf "  framework update                        Update Framework and CLI\n"
    printf "  framework help                          Show this help\n\n"

    printf "${YELLOW}Project Types:${NC}\n"
    printf "  project       Full-featured data analysis (default)\n"
    printf "  course        Teaching materials\n"
    printf "  presentation  Single talk/presentation\n\n"

    printf "${YELLOW}More Information:${NC}\n"
    printf "  https://github.com/table1/framework\n"
    ;;

  *)
    echo "Unknown command: $COMMAND"
    echo "Run 'framework help' for usage information"
    exit 1
    ;;
esac
