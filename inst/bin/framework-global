#!/usr/bin/env bash
# Framework CLI - Unified Implementation (v0.6)
#
# This is the unified CLI that works both globally and within projects.
# Commands are context-aware: some only work in projects, but help shows all.
#
# New command structure (v0.6):
#   settings:*     - Configuration commands (replaces configure:*)
#   ai:*           - AI assistant commands (replaces configure:ai-agents, sync:ai-context)
#   data:*         - Data management (add, list, edit) - project-local
#   connections:*  - Database connections (add, list, edit) - project-local
#   packages:*     - Package management (add, list, update) - project-local
#   make:*         - Create project artifacts - project-local

set -e

# Detect color support
if [ -t 1 ] && command -v tput >/dev/null 2>&1 && [ "$(tput colors 2>/dev/null || echo 0)" -ge 8 ]; then
  BLUE='\033[1;34m'
  YELLOW='\033[1;33m'
  GREEN='\033[1;32m'
  RED='\033[1;31m'
  DIM='\033[2m'
  NC='\033[0m'
else
  BLUE=''
  YELLOW=''
  GREEN=''
  RED=''
  DIM=''
  NC=''
fi

# Detect if we're in a Framework project (search upward)
IN_PROJECT=false
find_project_root() {
  local dir="$PWD"
  while [ "$dir" != "/" ]; do
    # Check for framework.db (always exists) or bin/framework (project marker)
    if [ -f "$dir/framework.db" ] || [ -f "$dir/bin/framework" ]; then
      echo "$dir"
      return 0
    fi
    dir=$(dirname "$dir")
  done
  return 1
}

if find_project_root >/dev/null 2>&1; then
  IN_PROJECT=true
fi

COMMAND="${1:-help}"

# Package version for cache busting
PACKAGE_VERSION=$(Rscript --quiet --no-save -e "cat(as.character(packageVersion('framework')))" 2>/dev/null || echo "dev")
SCRIPT_URL="https://raw.githubusercontent.com/table1/framework-project/main/new-project.sh?v=${PACKAGE_VERSION}"

# Function to check if settings are configured
check_settings_configured() {
  frameworkrc="$HOME/.frameworkrc"

  if [ ! -f "$frameworkrc" ]; then
    return 1
  fi

  fw_ides=$(grep "^FW_IDES=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
  fw_ai=$(grep "^FW_AI_SUPPORT=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')

  if [ -z "$fw_ides" ] || [ -z "$fw_ai" ]; then
    return 1
  fi

  return 0
}

# Function to run settings check-in (first-time setup)
run_settings_checkin() {
  frameworkrc="$HOME/.frameworkrc"

  if [ ! -f "$frameworkrc" ]; then
    touch "$frameworkrc"
  fi

  existing_ides=$(grep "^FW_IDES=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
  existing_ai=$(grep "^FW_AI_SUPPORT=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')

  if [ -z "$existing_ides" ] || [ -z "$existing_ai" ]; then
    printf "\n${BLUE}═══════════════════════════════════════════════${NC}\n"
    printf "${BLUE}Framework Settings Configuration${NC}\n"
    printf "${BLUE}═══════════════════════════════════════════════${NC}\n\n"
  fi

  # IDE preferences
  if [ -z "$existing_ides" ]; then
    printf "${YELLOW}Editor Preferences${NC}\n"
    printf "Which editor do you primarily use?\n"
    printf "  1. Positron / VS Code\n"
    printf "  2. RStudio\n"
    printf "  3. Both\n"
    printf "  4. Other\n"
    printf "Choice (1-4): "
    read -r ide_choice

    case "$ide_choice" in
      1) ides="vscode" ;;
      2) ides="rstudio" ;;
      3) ides="rstudio,vscode" ;;
      4) ides="none" ;;
      *) ides="rstudio,vscode" ;;
    esac

    grep -v "^FW_IDES=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
    echo "FW_IDES=\"$ides\"" >> "$frameworkrc.tmp"
    mv "$frameworkrc.tmp" "$frameworkrc"
    printf "\n"
  fi

  # AI support
  if [ -z "$existing_ai" ]; then
    printf "${YELLOW}AI Assistant Support${NC}\n"
    printf "Enable AI assistant context files? (y/n) [y]: "
    read -r ai_response

    if [ "$ai_response" = "n" ] || [ "$ai_response" = "N" ]; then
      grep -v "^FW_AI_SUPPORT=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
      grep -v "^FW_AI_ASSISTANTS=" "$frameworkrc.tmp" > "$frameworkrc.tmp2" 2>/dev/null || touch "$frameworkrc.tmp2"
      echo "FW_AI_SUPPORT=\"never\"" >> "$frameworkrc.tmp2"
      mv "$frameworkrc.tmp2" "$frameworkrc"
      rm -f "$frameworkrc.tmp"
    else
      printf "\nWhich AI assistants? (y/n for each)\n"
      printf "  Claude Code? [y]: "
      read -r use_claude
      printf "  GitHub Copilot? [n]: "
      read -r use_copilot
      printf "  AGENTS.md (OpenAI Codex)? [n]: "
      read -r use_agents

      assistants=""
      if [ "$use_claude" != "n" ] && [ "$use_claude" != "N" ]; then
        assistants="claude"
      fi
      if [ "$use_copilot" = "y" ] || [ "$use_copilot" = "Y" ]; then
        if [ -n "$assistants" ]; then assistants="$assistants,copilot"; else assistants="copilot"; fi
      fi
      if [ "$use_agents" = "y" ] || [ "$use_agents" = "Y" ]; then
        if [ -n "$assistants" ]; then assistants="$assistants,agents"; else assistants="agents"; fi
      fi

      if [ -z "$assistants" ]; then
        assistants="claude"
      fi

      grep -v "^FW_AI_SUPPORT=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
      grep -v "^FW_AI_ASSISTANTS=" "$frameworkrc.tmp" > "$frameworkrc.tmp2" 2>/dev/null || touch "$frameworkrc.tmp2"
      echo "FW_AI_SUPPORT=\"yes\"" >> "$frameworkrc.tmp2"
      echo "FW_AI_ASSISTANTS=\"$assistants\"" >> "$frameworkrc.tmp2"
      mv "$frameworkrc.tmp2" "$frameworkrc"
      rm -f "$frameworkrc.tmp"

      printf "\n${YELLOW}Default Canonical AI File${NC}\n"
      printf "  1. AGENTS.md (recommended)\n"
      printf "  2. CLAUDE.md\n"
      printf "  3. .github/copilot-instructions.md\n"
      printf "Choice (1-3) [1]: "
      read -r canonical_choice

      case "$canonical_choice" in
        2) canonical_default="CLAUDE.md" ;;
        3) canonical_default=".github/copilot-instructions.md" ;;
        *) canonical_default="AGENTS.md" ;;
      esac

      grep -v "^FW_AI_CANONICAL_DEFAULT=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
      echo "FW_AI_CANONICAL_DEFAULT=\"$canonical_default\"" >> "$frameworkrc.tmp"
      mv "$frameworkrc.tmp" "$frameworkrc"
    fi
    printf "\n"
  fi

  if [ -z "$existing_ides" ] || [ -z "$existing_ai" ]; then
    printf "${GREEN}✓ Preferences saved!${NC}\n"
    printf "Settings stored in ~/.frameworkrc\n\n"
  fi
}

# Function to require project context
require_project() {
  if [ "$IN_PROJECT" = false ]; then
    printf "${RED}Error: This command requires a Framework project${NC}\n"
    printf "Run this command from inside a project directory (with config.yml)\n"
    exit 1
  fi
}

case "$COMMAND" in
  new)
    # Warn if nested in existing project
    if [ "$IN_PROJECT" = true ]; then
      printf "${YELLOW}⚠ Warning: You are inside an existing Framework project${NC}\n"
      printf "Creating a nested project is unusual. Continue? (y/n) [n]: "
      read -r continue_response
      if [ "$continue_response" != "y" ] && [ "$continue_response" != "Y" ]; then
        printf "Cancelled.\n"
        exit 0
      fi
      printf "\n"
    fi

    if ! check_settings_configured; then
      printf "\n${YELLOW}Before we get started...${NC}\n\n"
      run_settings_checkin
    fi

    # Export settings
    frameworkrc="$HOME/.frameworkrc"
    if [ -f "$frameworkrc" ]; then
      export FW_IDES=$(grep "^FW_IDES=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
      export FW_AI_SUPPORT=$(grep "^FW_AI_SUPPORT=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
      export FW_AI_ASSISTANTS=$(grep "^FW_AI_ASSISTANTS=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
      export FW_AI_CANONICAL_DEFAULT=$(grep "^FW_AI_CANONICAL_DEFAULT=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
    fi

    # Config directory preference - only ask if not already set
    global_config_dir=$(grep "^FW_CONFIG_DIR=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')

    if [ -z "$global_config_dir" ]; then
      # Not set - ask user and save preference
      printf "\n${YELLOW}Configuration Directory${NC}\n"
      printf "Where should split config files be stored?\n"
      printf "  1. settings/ (recommended)\n"
      printf "  2. config/\n"
      printf "Choice (1-2) [1]: "
      read -r config_dir_choice

      case "$config_dir_choice" in
        2)
          export FW_CONFIG_DIR="config"
          # Save to frameworkrc
          grep -v "^FW_CONFIG_DIR=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
          echo "FW_CONFIG_DIR=\"config\"" >> "$frameworkrc.tmp"
          mv "$frameworkrc.tmp" "$frameworkrc"
          ;;
        *)
          export FW_CONFIG_DIR="settings"
          # Save to frameworkrc
          grep -v "^FW_CONFIG_DIR=" "$frameworkrc" > "$frameworkrc.tmp" 2>/dev/null || touch "$frameworkrc.tmp"
          echo "FW_CONFIG_DIR=\"settings\"" >> "$frameworkrc.tmp"
          mv "$frameworkrc.tmp" "$frameworkrc"
          ;;
      esac
      printf "\n${GREEN}✓ Preference saved${NC}\n\n"
    else
      # Already set - use saved preference
      export FW_CONFIG_DIR="$global_config_dir"
    fi

    printf "\n"

    shift

    # Check for dev mode
    DEV_MODE=false
    for arg in "$@"; do
      if [ "$arg" = "--dev-mode" ]; then
        DEV_MODE=true
        break
      fi
    done

    if [ "$DEV_MODE" = true ]; then
      LOCAL_SCRIPT="$HOME/code/framework-project/new-project.sh"
      if [ ! -f "$LOCAL_SCRIPT" ]; then
        printf "${RED}Error: Dev mode requires framework-project at $HOME/code/framework-project${NC}\n"
        exit 1
      fi
      export FW_DEV_MODE=true
      export FW_DEV_PATH="$HOME/code/framework"
      bash "$LOCAL_SCRIPT" "$@"
    else
      curl -fsSL "$SCRIPT_URL" | bash -s "$@"
    fi
    ;;

  # Settings namespace (global configuration)
  settings:editor)
    frameworkrc="$HOME/.frameworkrc"
    fw_ides=$(grep "^FW_IDES=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')

    printf "\n${BLUE}Editor Configuration${NC}\n"
    printf "═══════════════════════════════════════════════\n\n"
    if [ -n "$fw_ides" ]; then
      printf "Current: $fw_ides\n\n"
    else
      printf "Current: not configured\n\n"
    fi

    printf "Which editor do you use?\n"
    printf "  1. Positron / VS Code\n"
    printf "  2. RStudio\n"
    printf "  3. Both\n"
    printf "  4. Other\n\n"
    printf "Choice (1-4): "
    read -r choice

    case "$choice" in
      1) ides="vscode" ;;
      2) ides="rstudio" ;;
      3) ides="rstudio,vscode" ;;
      4) ides="none" ;;
      *)
        printf "\n${RED}Invalid choice${NC}\n"
        exit 1
        ;;
    esac

    if [ -f "$frameworkrc" ]; then
      grep -v "^FW_IDES=" "$frameworkrc" > "$frameworkrc.tmp"
      mv "$frameworkrc.tmp" "$frameworkrc"
    fi

    echo "FW_IDES=\"$ides\"" >> "$frameworkrc"
    printf "\n${GREEN}✓ Editor preferences saved${NC}\n"
    printf "  Editor: $ides\n"
    ;;

  settings:author)
    require_project
    Rscript --quiet --no-save -e "library(framework); configure_author()"
    ;;

  settings:directories)
    require_project
    Rscript --quiet --no-save -e "library(framework); configure_directories()"
    ;;

  # AI namespace
  ai:configure)
    frameworkrc="$HOME/.frameworkrc"
    fw_support=$(grep "^FW_AI_SUPPORT=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')
    fw_assistants=$(grep "^FW_AI_ASSISTANTS=" "$frameworkrc" 2>/dev/null | cut -d'=' -f2 | tr -d '"')

    printf "\n${BLUE}AI Assistant Configuration${NC}\n"
    printf "═══════════════════════════════════════════════\n\n"
    if [ "$fw_support" = "never" ]; then
      printf "Current: disabled\n\n"
    elif [ "$fw_support" = "yes" ]; then
      printf "Current: enabled ($fw_assistants)\n\n"
    else
      printf "Current: not configured\n\n"
    fi

    printf "What would you like to do?\n"
    printf "  1. Enable/change AI support\n"
    printf "  2. Disable AI support\n"
    printf "  3. Cancel\n\n"
    printf "Choice (1-3): "
    read -r choice

    case "$choice" in
      1)
        printf "\nWhich assistants?\n"
        printf "  1. Claude Code\n"
        printf "  2. GitHub Copilot\n"
        printf "  3. AGENTS.md\n"
        printf "  4. All\n\n"
        printf "Selection (e.g., 1,3 or 4): "
        read -r selection

        assistants=""
        if [ "$selection" = "4" ]; then
          assistants="claude,copilot,agents"
        else
          if echo "$selection" | grep -q "1"; then assistants="claude"; fi
          if echo "$selection" | grep -q "2"; then
            if [ -n "$assistants" ]; then assistants="$assistants,copilot"; else assistants="copilot"; fi
          fi
          if echo "$selection" | grep -q "3"; then
            if [ -n "$assistants" ]; then assistants="$assistants,agents"; else assistants="agents"; fi
          fi
        fi

        if [ -z "$assistants" ]; then
          printf "\n${RED}No assistants selected${NC}\n"
          exit 1
        fi

        R --quiet --no-save -e "framework::configure_ai_agents(support='yes', assistants=c($(echo $assistants | sed 's/,/\",\"/g' | sed 's/^/\"/' | sed 's/$/\"/'  )))"
        ;;
      2)
        R --quiet --no-save -e "framework::configure_ai_agents(support='never')"
        ;;
      *)
        printf "\n${YELLOW}Cancelled${NC}\n"
        exit 0
        ;;
    esac
    ;;

  ai:sync)
    require_project
    Rscript --quiet --no-save -e "library(framework); ai_sync_context()"
    ;;

  # Data namespace (project-local)
  data:add)
    require_project
    Rscript --quiet --no-save -e "library(framework); configure_data()"
    ;;

  data:list)
    require_project
    Rscript --quiet --no-save -e "library(framework); data_list()"
    ;;

  data:edit)
    require_project
    shift
    NAME="${1}"
    if [ -z "$NAME" ]; then
      printf "${RED}Error: Data source name required${NC}\n"
      printf "Usage: framework data:edit <name>\n"
      exit 1
    fi
    Rscript --quiet --no-save -e "library(framework); configure_data(name='$NAME')"
    ;;

  # Connections namespace (project-local)
  connections:add)
    require_project
    Rscript --quiet --no-save -e "library(framework); configure_connection()"
    ;;

  connections:list)
    require_project
    Rscript --quiet --no-save -e "library(framework); connections_list()"
    ;;

  connections:edit)
    require_project
    shift
    NAME="${1}"
    if [ -z "$NAME" ]; then
      printf "${RED}Error: Connection name required${NC}\n"
      printf "Usage: framework connections:edit <name>\n"
      exit 1
    fi
    Rscript --quiet --no-save -e "library(framework); configure_connection(name='$NAME')"
    ;;

  # Packages namespace (project-local)
  packages:add)
    require_project
    Rscript --quiet --no-save -e "library(framework); configure_packages()"
    ;;

  packages:list)
    require_project
    Rscript --quiet --no-save -e "library(framework); packages_list()"
    ;;

  packages:update)
    require_project
    Rscript --quiet --no-save -e "library(framework); packages_update()"
    ;;

  # Make namespace (project-local)
  make:notebook)
    require_project
    shift
    NAME="${1}"
    if [ -z "$NAME" ]; then
      Rscript --quiet --no-save -e "library(framework); make_notebook()"
    else
      Rscript --quiet --no-save -e "library(framework); make_notebook('$NAME')"
    fi
    ;;

  make:quarto)
    require_project
    shift
    NAME="${1}"
    if [ -z "$NAME" ]; then
      Rscript --quiet --no-save -e "library(framework); make_qmd()"
    else
      Rscript --quiet --no-save -e "library(framework); make_qmd('$NAME')"
    fi
    ;;

  make:rmd)
    require_project
    shift
    NAME="${1}"
    if [ -z "$NAME" ]; then
      Rscript --quiet --no-save -e "library(framework); make_rmd()"
    else
      Rscript --quiet --no-save -e "library(framework); make_rmd('$NAME')"
    fi
    ;;

  make:script)
    require_project
    shift
    NAME="${1}"
    if [ -z "$NAME" ]; then
      Rscript --quiet --no-save -e "library(framework); make_script()"
    else
      Rscript --quiet --no-save -e "library(framework); make_script('$NAME')"
    fi
    ;;

  make:presentation)
    require_project
    shift
    NAME="${1}"
    if [ -z "$NAME" ]; then
      Rscript --quiet --no-save -e "library(framework); make_presentation()"
    else
      Rscript --quiet --no-save -e "library(framework); make_presentation('$NAME')"
    fi
    ;;

  # Git Hooks
  hooks:list)
    require_project
    Rscript --quiet --no-save -e "library(framework); hooks_list()"
    ;;

  hooks:install)
    require_project
    Rscript --quiet --no-save -e "library(framework); hooks_install()"
    ;;

  hooks:uninstall)
    require_project
    Rscript --quiet --no-save -e "library(framework); hooks_uninstall()"
    ;;

  hooks:enable)
    require_project
    HOOK_NAME="$2"
    if [ -z "$HOOK_NAME" ]; then
      printf "${RED}Error: Hook name required${NC}\n"
      printf "Usage: framework hooks:enable <name>\n"
      exit 1
    fi
    Rscript --quiet --no-save -e "library(framework); hooks_enable('$HOOK_NAME')"
    ;;

  hooks:disable)
    require_project
    HOOK_NAME="$2"
    if [ -z "$HOOK_NAME" ]; then
      printf "${RED}Error: Hook name required${NC}\n"
      printf "Usage: framework hooks:disable <name>\n"
      exit 1
    fi
    Rscript --quiet --no-save -e "library(framework); hooks_disable('$HOOK_NAME')"
    ;;

  # Maintenance
  version)
    Rscript --quiet --no-save --slave -e "cat('Framework version', as.character(packageVersion('framework')), '\n')"
    ;;

  update|self-update)
    printf "${BLUE}Updating Framework from GitHub...${NC}\n\n"
    printf "Update dependencies? [Y/n]: "
    read -r response

    case "$response" in
      [nN]|[nN][oO])
        R --quiet --no-save -e "framework::cli_update(upgrade_deps = FALSE)"
        ;;
      *)
        R --quiet --no-save -e "framework::cli_update(upgrade_deps = TRUE)"
        ;;
    esac

    # If inside a project, also update local bin/framework
    if [ "$IN_PROJECT" = true ]; then
      PROJECT_ROOT=$(find_project_root)
      if [ -n "$PROJECT_ROOT" ] && [ -d "$PROJECT_ROOT/bin" ]; then
        printf "\n${BLUE}Updating project-local CLI...${NC}\n"

        # Fetch latest bin/framework from framework-project
        FRAMEWORK_BIN_URL="https://raw.githubusercontent.com/table1/framework-project/main/bin/framework"

        if curl -fsSL "$FRAMEWORK_BIN_URL" -o "$PROJECT_ROOT/bin/framework.tmp"; then
          mv "$PROJECT_ROOT/bin/framework.tmp" "$PROJECT_ROOT/bin/framework"
          chmod +x "$PROJECT_ROOT/bin/framework"
          printf "${GREEN}✓ Updated $PROJECT_ROOT/bin/framework${NC}\n"
        else
          printf "${YELLOW}⚠ Could not update local bin/framework (continuing...)${NC}\n"
        fi
      fi
    fi

    if ! check_settings_configured; then
      run_settings_checkin
    fi
    ;;

  help|--help|-h)
    printf "${BLUE}Framework CLI v0.6 - R Data Analysis Scaffolding${NC}\n\n"

    printf "${YELLOW}Create:${NC}\n"
    printf "  framework new [name] [type]             Create new project\n\n"

    # Only show project commands when IN a project
    if [ "$IN_PROJECT" = true ]; then
      printf "${YELLOW}Make:${NC}\n"
      printf "  framework make:notebook [name]          Create notebook\n"
      printf "  framework make:quarto [name]            Create Quarto notebook\n"
      printf "  framework make:rmd [name]               Create RMarkdown notebook\n"
      printf "  framework make:script [name]            Create R script\n"
      printf "  framework make:presentation [name]      Create presentation\n\n"
    fi

    printf "${YELLOW}Settings:${NC}\n"
    printf "  framework settings:editor               Configure editor preferences\n"
    if [ "$IN_PROJECT" = true ]; then
      printf "  framework settings:author               Set author information\n"
      printf "  framework settings:directories          Configure directories\n"
    fi
    printf "\n"

    if [ "$IN_PROJECT" = true ]; then
      printf "${YELLOW}Data:${NC}\n"
      printf "  framework data:add                      Add data source\n"
      printf "  framework data:list                     List data sources\n"
      printf "  framework data:edit <name>              Edit data source\n\n"

      printf "${YELLOW}Connections:${NC}\n"
      printf "  framework connections:add               Add database connection\n"
      printf "  framework connections:list              List connections\n"
      printf "  framework connections:edit <name>       Edit connection\n\n"

      printf "${YELLOW}Packages:${NC}\n"
      printf "  framework packages:add                  Add package\n"
      printf "  framework packages:list                 List packages\n"
      printf "  framework packages:update               Update packages\n\n"
    fi

    printf "${YELLOW}AI:${NC}\n"
    printf "  framework ai:configure                  Configure AI assistants\n"
    if [ "$IN_PROJECT" = true ]; then
      printf "  framework ai:sync                       Sync AI context\n"
    fi
    printf "\n"

    if [ "$IN_PROJECT" = true ]; then
      printf "${YELLOW}Git Hooks:${NC}\n"
      printf "  framework hooks:list                    Show hook status\n"
      printf "  framework hooks:install                 Install hooks\n"
      printf "  framework hooks:uninstall               Remove hooks\n"
      printf "  framework hooks:enable <name>           Enable hook\n"
      printf "  framework hooks:disable <name>          Disable hook\n\n"
    fi

    printf "${YELLOW}Maintenance:${NC}\n"
    printf "  framework version                       Show version\n"
    printf "  framework update                        Update Framework\n"
    printf "  framework help                          Show this help\n\n"

    printf "${YELLOW}Project Types:${NC}\n"
    printf "  project       Full-featured data analysis (default)\n"
    printf "  course        Teaching materials\n"
    printf "  presentation  Single talk/presentation\n\n"

    printf "${YELLOW}More:${NC}\n"
    printf "  https://github.com/table1/framework\n"
    ;;

  *)
    printf "${RED}Unknown command: ${NC}$COMMAND\n"
    printf "Run '${GREEN}framework help${NC}' for usage\n"
    exit 1
    ;;
esac
