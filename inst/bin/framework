#!/usr/bin/env bash
# Framework CLI - Thin wrapper for new-project.sh
#
# This script provides a persistent CLI command for Framework.
# It fetches and executes new-project.sh from the framework-project repository.

set -e

# URL to the canonical new-project.sh script
SCRIPT_URL="https://raw.githubusercontent.com/table1/framework-project/main/new-project.sh"

# Detect color support
if [ -t 1 ] && command -v tput >/dev/null 2>&1 && [ "$(tput colors 2>/dev/null || echo 0)" -ge 8 ]; then
  BLUE='\033[0;34m'
  YELLOW='\033[1;33m'
  GREEN='\033[0;32m'
  NC='\033[0m'
else
  BLUE=''
  YELLOW=''
  GREEN=''
  NC=''
fi

COMMAND="${1:-help}"

case "$COMMAND" in
  new)
    # Remove 'new' from arguments and pass the rest to new-project.sh
    shift
    curl -fsSL "$SCRIPT_URL" | bash -s "$@"
    ;;

  version)
    # Show Framework package version
    Rscript --quiet --no-save --slave -e "cat('Framework version', as.character(packageVersion('framework')), '\n')"
    ;;

  update)
    # Update Framework package and CLI from GitHub
    printf "${BLUE}Updating Framework and CLI from GitHub...${NC}\n\n"
    printf "Update dependencies to latest versions? [Y/n]: "
    read -r response

    case "$response" in
      [nN]|[nN][oO])
        R --quiet --no-save -e "framework::cli_update(upgrade_deps = FALSE)"
        ;;
      *)
        R --quiet --no-save -e "framework::cli_update(upgrade_deps = TRUE)"
        ;;
    esac
    ;;

  help|--help|-h)
    printf "${BLUE}Framework CLI - R Data Analysis Project Scaffolding${NC}\n\n"
    printf "${YELLOW}Usage:${NC}\n"
    printf "  framework new [name] [type]    Create new project\n"
    printf "  framework version              Show Framework package version\n"
    printf "  framework update               Update Framework and CLI from GitHub\n"
    printf "  framework help                 Show this help\n\n"
    printf "${YELLOW}Examples:${NC}\n"
    printf "  framework new                  ${GREEN}# Interactive mode (prompts for options)${NC}\n"
    printf "  framework new myproject        ${GREEN}# Create 'myproject' with defaults${NC}\n"
    printf "  framework new slides course    ${GREEN}# Create course project 'slides'${NC}\n\n"
    printf "${YELLOW}Project Types:${NC}\n"
    printf "  project       Full-featured data analysis (default)\n"
    printf "  course        Teaching materials\n"
    printf "  presentation  Single talk/presentation\n\n"
    printf "${YELLOW}Installation Alternatives:${NC}\n"
    printf "  If you prefer not to install the CLI, you can use:\n\n"
    printf "  ${GREEN}# One-time curl (no installation)${NC}\n"
    printf "  curl -fsSL https://raw.githubusercontent.com/table1/framework-project/main/new-project.sh | bash\n\n"
    printf "  ${GREEN}# Manual git clone${NC}\n"
    printf "  git clone https://github.com/table1/framework-project myproject\n\n"
    printf "${YELLOW}More Information:${NC}\n"
    printf "  Package:  https://github.com/table1/framework\n"
    printf "  Template: https://github.com/table1/framework-project\n"
    ;;

  *)
    echo "Unknown command: $COMMAND"
    echo "Run 'framework help' for usage information"
    exit 1
    ;;
esac
